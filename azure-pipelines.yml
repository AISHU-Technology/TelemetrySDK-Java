# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# 触发管道
trigger:
  batch: true
  branches:
    include:
      - "feature-*"
      - "feature/*"
      - "develop"
      - "release-*"
      - "release/*"

variables:
  - group: anyrobot-global-config
  - name: BUILD_IMAGE
    value: "acr.aishu.cn/public/maven:1.1"
  - name: SONARQUBE_IMAGE
    value: "acr.aishu.cn/public/sonarsource/sonar-scanner-cli:4.8"
  - name: LintReportName # 此行保持一致
    value: jacoco.xml
  - name: UTReportName # 此行保持一致
    value: jacoco.xml
  - name: CoverageReportName # 此行保持一致
    value: jacoco.xml
  - name: FTP_URL
    value: "ftp://ftp-ar.aishu.cn"
  - name: FTP_USER
    value: "ftp-ar"
  - name: FTP_PWD
    value: "F64edf#s"

resources:
  containers:
    - container: dotnet
      endpoint: acr-registry
      image: dotnet/runtime:3.1-bullseye-slim

stages:
  - stage: CodeCheck
    displayName: 代码检查
    jobs:
      - job: _1CodeCheck
        displayName: 1.代码检查(UT/Lint)
        workspace:
          clean: all
        pool:
          name: telemetrySDK-pool
          demands:
            - docker
        steps:
          - checkout: self
          - task: Bash@3
            displayName: 单元测试
            inputs:
              targetType: 'inline'
              script: |
                #!/usr/bin/env bash
                set -ex

                ls -alh

                docker run --rm \
                      -v $(pwd):/TelemetrySDK-Java \
                      $(BUILD_IMAGE) bash -c "
                  set -ex

                  cd /TelemetrySDK-Java/exporter/common
                  mvn clean install assembly:assembly
                  mvn sonar:sonar -Dsonar.java.binaries=target/classes \
                  -Dsonar.host.url=$(sonarqube.server) \
                  -Dsonar.login=$(sonarqube.token) \
                  -Dsonar.java.covergaePlugin=jacoco \
                  -Dsonar.coverage.thresholds=99 \
                  -Dsonar.coverage.minimumProjectThreshold=99 \
                  -Dsonar.jacoco.reportPaths=target/jacoco.exec \
                  # cd /TelemetrySDK-Java/exporter/ar-metric
                  # mvn clean install assembly:assembly
                  # mvn sonar:sonar -Dsonar.host.url=$(sonarqube.server) -Dsonar.login=$(sonarqube.token)
                  # cd /TelemetrySDK-Java/exporter/ar-trace
                  # mvn clean install assembly:assembly
                  # mvn sonar:sonar -Dsonar.host.url=$(sonarqube.server) -Dsonar.login=$(sonarqube.token)
                  # cd /TelemetrySDK-Java/sdk
                  # mvn clean install assembly:assembly
                  # mvn sonar:sonar -Dsonar.host.url=$(sonarqube.server) -Dsonar.login=$(sonarqube.token)
                  "
          # - task: PublishCodeCoverageResults@1
          #   displayName: 'fugailv'
          #   inputs:
          #     codeCoverageTool: JaCoCo
          #     # summaryFileLocation: '$(Build.BinariesDirectory)/exporter/common/target/site/jacoco/jacoco.xml'
          #     summaryFileLocation: '$(Build.BinariesDirectory)/exporter/common/target/jacoco.exec'
          #     reportDirectory: '$(Build.BinariesDirectory)/exporter/common/target/site/jacoco'
          #     failIfCoverageEmpty: true
          #     pathToSources: '$(Build.BinariesDirectory)/exporter/common/src/main/java'
          #     additionalCodeCoverageFiles: '$(Build.BinariesDirectory)/exporter/common/target/site/jacoco/jacoco.xml'
          #   condition: always()  

          - task: PublishCodeCoverageResults@1
            displayName: 发布UT测试覆盖率报告
            inputs:
              codeCoverageTool: JaCoCo
              pathToSources: "./TelemetrySDK-Java/exporter/common/src/main/java"
              reportDirectory: "./TelemetrySDK-Java/exporter/common/target/jacoco.exec"
              summaryFileLocation: "./TelemetrySDK-Java/exporter/common/target/jacoco.exec"

          # - task: BuildQualityChecks@8 # 此行保持一致 代码覆盖率卡点
          #   displayName: Quality Gate Coverage # 此行保持一致
          #   inputs:
          #     coverageType: "lines" # 代表行覆盖率
          #     coverageFailOption: "fixed"
          #     checkCoverage: true # 此行保持一致
          #     coverageThreshold: "80.0" # 代码覆盖率卡点阈值

          # - task: SonarQubePrepare@4
          #   inputs:
          #     scannerMode: MSBuild 
          - task: BuildQualityChecks@8           # 此行保持一致     # UT卡点
            displayName: Quality Gate UT         # 此行保持一致
            inputs:
              # checkWarnings: true                # 此行保持一致
              # warningFailOption: 'fixed'
              # warningThreshold: '99'
              showStatistics: true
              # evaluateTaskWarnings: false
              # evaluateFileWarnings: true
              coverageThreshold: "99"
              coverageType: lines
              coverageFailOption: fixed
              checkCoverage: true
              # warningFilesFolder: './TelemetrySDK-Java/exporter/common/target/site/jacoco'
              # warningFiles: './TelemetrySDK-Java/exporter/common/target/jacoco.exec'    # 此行保持一致
              # warningFileFilters: '/^.+<\/failure>.*?$/'
              # warningFilesArtifact: './TelemetrySDK-Java/exporter/common/target/jacoco.exec'
          - task: Bash@3
            displayName: 上传SonarQube
            inputs:
              targetType: 'inline'
              script: |
                #!/usr/bin/env bash
                set -ex

                APP_NAME="opentelemetry-exporter-common"

                docker run --rm \
                        -u root:root \
                        -v $(pwd):/TelemetrySDK-Java \
                        $(SONARQUBE_IMAGE) bash -c "
                    set -ex

                    cd /TelemetrySDK-Java/exporter/common
                    sonar-scanner \
                      -D sonar.host.url=$(sonarqube.server) \
                      -D sonar.projectKey='opentelemetry-exporter-common' \
                      -D sonar.projectName=${APP_NAME} \
                      -D sonar.projectVersion=2.4.0 \
                      -D sonar.sources=src/main/java/ \
                      -D sonar.language=java \
                      -D sonar.java.binaries=target/classes \
                      -D sonar.qualitygate.wait=true \
                      -D sonar.coverage.thresholds=99 \
                      -D sonar.login=$(sonarqube.token) \
                      -Dsonar.java.covergaePlugin=jacoco \
                      -Dsonar.jacoco.reportPaths=target/jacoco.exec \
                      -Dsonar.coverage.minimumProjectThreshold=99 \
                    "

          # - task: sonar-buildbreaker@8
          #   inputs:
          #     SonarQube: '$(sonarqube.server)'
              
              
              

          # - task: FtpUpload@2
          #   displayName: 上传log到$(Build.SourceBranchName)
          #   inputs:
          #     credentialsOption: 'inputs'
          #     serverUrl: $(FTP_URL)
          #     username: $(FTP_USER)
          #     password: $(FTP_PWD)
          #     rootDirectory: './sdk/target/'
          #     filePatterns: '**.jar'
          #     remoteDirectory: '/data/ftp/telemetrySDK/java/$(Build.SourceBranchName)'
          #     clean: false
          #     cleanContents: false
          #     preservePaths: false
          #     trustSSL: false

          # - task: FtpUpload@2
          #   displayName: 上传common到$(Build.SourceBranchName)
          #   inputs:
          #     credentialsOption: 'inputs'
          #     serverUrl: $(FTP_URL)
          #     username: $(FTP_USER)
          #     password: $(FTP_PWD)
          #     rootDirectory: './exporter/common/target/'
          #     filePatterns: '**.jar'
          #     remoteDirectory: '/data/ftp/telemetrySDK/java/$(Build.SourceBranchName)'
          #     clean: false
          #     cleanContents: false
          #     preservePaths: false
          #     trustSSL: false

          # - task: FtpUpload@2
          #   displayName: 上传metric到$(Build.SourceBranchName)
          #   inputs:
          #     credentialsOption: 'inputs'
          #     serverUrl: $(FTP_URL)
          #     username: $(FTP_USER)
          #     password: $(FTP_PWD)
          #     rootDirectory: './exporter/ar-metric/target/'
          #     filePatterns: '**.jar'
          #     remoteDirectory: '/data/ftp/telemetrySDK/java/$(Build.SourceBranchName)'
          #     clean: false
          #     cleanContents: false
          #     preservePaths: false
          #     trustSSL: false              

          # - task: FtpUpload@2
          #   displayName: 上传trace到$(Build.SourceBranchName)
          #   inputs:
          #     credentialsOption: 'inputs'
          #     serverUrl: $(FTP_URL)
          #     username: $(FTP_USER)
          #     password: $(FTP_PWD)
          #     rootDirectory: './exporter/ar-trace/target/'
          #     filePatterns: '**.jar'
          #     remoteDirectory: '/data/ftp/telemetrySDK/java/$(Build.SourceBranchName)'
          #     clean: false
          #     cleanContents: false
          #     preservePaths: false
          #     trustSSL: false


          # - task: FtpUpload@2
          #   displayName: 上传log到release
          #   inputs:
          #     credentialsOption: 'inputs'
          #     serverUrl: $(FTP_URL)
          #     username: $(FTP_USER)
          #     password: $(FTP_PWD)
          #     rootDirectory: './sdk/target/'
          #     filePatterns: '**.jar'
          #     remoteDirectory: '/data/ftp/telemetrySDK/java/release'
          #     clean: false
          #     cleanContents: false
          #     preservePaths: false
          #     trustSSL: false

          # - task: FtpUpload@2
          #   displayName: 上传common到release
          #   inputs:
          #     credentialsOption: 'inputs'
          #     serverUrl: $(FTP_URL)
          #     username: $(FTP_USER)
          #     password: $(FTP_PWD)
          #     rootDirectory: './exporter/common/target/'
          #     filePatterns: '**.jar'
          #     remoteDirectory: '/data/ftp/telemetrySDK/java/release'
          #     clean: false
          #     cleanContents: false
          #     preservePaths: false
          #     trustSSL: false

          # - task: FtpUpload@2
          #   displayName: 上传metric到release
          #   inputs:
          #     credentialsOption: 'inputs'
          #     serverUrl: $(FTP_URL)
          #     username: $(FTP_USER)
          #     password: $(FTP_PWD)
          #     rootDirectory: './exporter/ar-metric/target/'
          #     filePatterns: '**.jar'
          #     remoteDirectory: '/data/ftp/telemetrySDK/java/release'
          #     clean: false
          #     cleanContents: false
          #     preservePaths: false
          #     trustSSL: false              

          # - task: FtpUpload@2
          #   displayName: 上传trace到release
          #   inputs:
          #     credentialsOption: 'inputs'
          #     serverUrl: $(FTP_URL)
          #     username: $(FTP_USER)
          #     password: $(FTP_PWD)
          #     rootDirectory: './exporter/ar-trace/target/'
          #     filePatterns: '**.jar'
          #     remoteDirectory: '/data/ftp/telemetrySDK/java/release'
          #     clean: false
          #     cleanContents: false
          #     preservePaths: false
          #     trustSSL: false

